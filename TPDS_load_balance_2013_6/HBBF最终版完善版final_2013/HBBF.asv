clc,clear;                 %多元化电价下数据中心负载实时调度监控管理仿真平台
tic
format short
%----------------------------------说明--------------------------------------%
%-----数据中心数目 n, 前端服务器数目 c 可以自己任意设定，建议选择区间为[2,10]；
%----随着c和n的增加，程序运行时间增加;
%-----每个数据中心的服务器数目M可以自己设定;
%-----端端传输延时可以自己任意设定;
%-----电网电价可以自己任意设定;
%-----负载请求L数目服从泊松分布，c 和 n 数目改变时，矩阵L的维数需要改变;
%----------------------------------------------------------------------------%
%%%%%%%智能电网电价%%%%%%%
% Pr1=[23 25 34 32 45 37 31 45 56];
% %%列表示前端服务器端口，行表示数据中心

Pr1=[34.8 33.2 28 25.6 25 24.6 22.8 24.8 27.2 31.85 33.4 35.2 36.2 36.2 36.8 37.2 38.5 40.4 41 42.4 41.7 47.1 45.2 36.6;...
74.73 74.73 74.73 74.73	74.73 74.73 74.73 74.73	74.73 74.73	74.73 74.73	74.73 74.73	74.73 74.73 74.73 74.73 74.73 74.73 74.73 74.73 74.73 74.73;...
19.35 18.2 17.87 17.99 20.54 21.95 25.79 29.22 34.38 36.58 38.23 37.93 39.5 49.94 55.45	50.93 42.49	36.91 36.73	36.09 30.4 27.14 25.73 21.03]';

%%%%%%转移延时%%%%%%%%%%%
DL1=[1.5 1 2 2.5 3 3.3 3.2 2 2.5 2.1 3.2 4.5 2.5 2.1 2 2 2.1 2.3 2.4 3 5.3 2 2 1.9;53 42 40 55 60 70 80 91 92 98 90 88 87 85 82 80 84 86 88 93 72 54 52 51;...
     37 33 30 40 50 55 60 72 78 82 87 89 82 75 64 65 62 67 88 75 55 48 44 35;62 56 50 46 54 76 84 90 84 87 94 99 90 88 83 80 90 91 94 100 85 77 70 77]/1000;
DL2=[58 54 53 60 66 70 75 80 90 95 96 90 89 88 76 77 82 85 89 96 78 65 55 56;2.3 1.8 2 2.3 2.5 2.8 2.7 3.2 3.4 3.6 3.8 4.4 3.5 3.2 2.4 2 2.2 2.5 2.9 2.8 3.6 1.5 1 1;...
     26 24 23 25 29 32 40 53 62 68 74 78 73 72 70 66 64 66 68 71 75 64 45 35;8 6 6.5 6 8 12 16 20 25 27 30 32 26 25 22 21 19 19 20 29 25 20 18 13]/1000;
DL3=[44 37 35 40 45 57 67 75 80 80 85 86 83 83 78 70 67 69 72 84 65 58 44 40;36 33 27 30 35 43 51 62 72 72 74 78 70 69 68 58 60 65 68 71 56 45 38 39;...
    1.1 1.2 1.5 2 2.4 2.8 2.5 3 3.6 3.7 2.9 2.8 2.7 2.6 2.1 2 2 2.5 3.4 1.5 1.6 1.5 1.1 1;38 38 36 37 35 46 56 65 73 75 78 75 72 74 70 64 67 69	78 73 64 55 46 40]/1000;
%%%%%%%%负载请求%%%%%%%%%%
L1=30000*ones(1,24);
L2=40000*ones(1,24);
L3=40000*ones(1,24);
L4=30000*ones(1,24);

%%%每一个数据中心最大服务器数目%%%%
MS=[5000 4000 4000];
%%%服务器负载处理能力
u=20; 
%%%%%负载请求%%%%%%%%%%%%
% L1=poissrnd(30000,1,24);
% L2=poissrnd(40000,1,24);
% L3=poissrnd(40000,1,24);
% L4=poissrnd(30000,1,24);
% L5=poissrnd(40000,1,24);
% L6=poissrnd(40000,1,24);
% L7=poissrnd(30000,1,24);
% L8=poissrnd(40000,1,24);
% L9=poissrnd(30000,1,24);
Fva=[];
h=0;
if length(Pr1(1,:))~=length(MS)
    display('数据中心数目与对应电价不匹配');
end
for nj=1:24
StX=[];
SUb=[];
SLb=[];
StF=[];
Aeq=[];
Beq=[];
XR=[];
SXR=[];
L=[];
STm=[];
A1=[];
B1=[];
A2=[];
A=[];
B=[];
Ub=[];
Lb=[];
M=MS;                                     %数据中心服务器最大数目 
Pr=Pr1(nj,:);
L=[L1(nj) L2(nj) L3(nj) L4(nj)]; %负载输入
n=length(M);                              %the number of data centers
c=length(L);                              %表示前端服务器
cc=c;
D=80/1000;                                %延时上界 
Tt=[DL1(:,nj)';DL2(:,nj)';DL3(:,nj)'];
Tty=Tt;    
upr=unique(Pr);                           %判断电价是否相同
Po=133.99/10^6;                           %服务器功率
Aq1=[];
Bq1=[];
cnt=0;
tmc=0;
ki=0;
Hg=zeros(n,1);
KK=4;                                    %判断振荡
xh=0;
%%延时处理--选择不能流向负载的数据线路%%
for i=1:n
    for j=1:c
        if Tt(i,j)>(D-1/1000)
            ki=ki+1;
            Aq1(ki,:)=zeros(1,n+c*n);
            Tt(i,j)=-1;
            ij=(j-1)*n+i;
            Aq1(ki,ij+n)=1;
            Bq1(ki)=0;
        end
    end
end                     
%%%%%%%%%%%%%延时处理结束%%%%%%%%%%%
%%%%%%系数设置，延时过大负载只能流向本地IDC唯一的情况%%%%%%
TT=Tt';
S_Tt=Tt;
ka=[];
kj=[];
H1=[];
H2=[];
H3=[];
sm=[];
DM=[];
it=0;
sg=0;
mg=1;
for i=1:c
    zn=0;
    for j=1:n
       if (TT(i,j)==-1)         %&& (i~=j)
           zn=zn+1;
       else sj=j;               %第sj个data center
       end
    end
    if zn==(n-1)
        it=it+1;
        ka=[ka,i];              %删除端口i
        Lm(it)=L(i);
        H1(it)=i;               %端口
        H2(it)=sj;  
        H3(it)=n+(i-1)*n+1;   %2n-n 6_21
        %dt=0.1-max(Tt(sj,:));
        Ms=ceil(L(i)/u);        %load
        M(sj)=M(sj)-Ms;
        DM(it,:)=[sj,Ms];
        sg=1;                    %标志
        sm(it,:)=[sj,TT(i,sj)];  %transmission delay延时存储
    end
end
%%%%%%处理结束%%%%%%%%
L([ka])=[];
TT([ka],:)=[]; 
Tt=TT';
YTT=Tt;                          %保存原来传输延时的数值
for i=1:length(H3)
    j=H3(i)-(i-1)*n;             %删除端口i到data center的负载流
    Aq1(:,[j:j+n-1])=[];
end
ai=0;
Sq=[];
if isempty(Aq1)==1
    la=0;
else
    la=length(Aq1(:,1));
end
for i=1:la
    if ~all(Aq1(i,:)==0)
        ai=ai+1;
        Sq(ai,:)=Aq1(i,:);     
    end
end
Aq1=Sq;
if ai>=1
   Bq1=zeros(1,ai);
else Bq1=[];
end
Tt= TT';
c=length(L);                              %the number of front-end web portal
Tm=zeros(n,1);
Beq=L';
LL=[];
for i=1:c
Lp(1:n)=L(i);
LL=[LL,Lp];
end
if c>=1
        DL=M*u;                 %服务器最大处理能力
        ftm=1;
        f1=Pr*Po;               %目标函数多项式系数
        f2=zeros(1,c*n);
        f=[f1,f2];              %f 的系数
        MOF=zeros(c,n);         %number of severs and the state of IDC
        Rmd1=[];
        xs=ones(1,n);           %产生n个1 
        for i1=1:c
            ZL=zeros(c,n);      %全是0阵列
            ZL(i1,:)=xs;    
            Rmd1=[Rmd1,ZL];
        end
        Aeq=[Aq1;MOF,Rmd1];     %第一个约束条件: 负载守恒
        Beq=[Bq1';Beq];

        Dy=(D-Tm)';              %%%%%延时处理
        Rm2=eye(n,n);            %rmd 的系数
        Rmd2=[];
        for i=1:c
            Rmd2=[Rmd2,Rm2];
        end
        m2=-u*eye(n,n);          %m的系数
        %OF1=[];
        %OF1=diag(1./Dy);         %ON/OFF的系数
        %A1=[m2,OF1,Rmd2];        %第二个约束条件：延时分析
        A=[m2,Rmd2];

        %OF2=[];
        %OF2=-diag(DL);           %ON/OFF的系数
        %m3=zeros(n,n);
        %A2=[m3,OF2,Rmd2];        %第三个约束条件，附加约束

        %A=[A1;A2];
        D_bd=[];
        D_bd=1./Dy;        %delay constraint 不等式右边
        %B=zeros(2*n,1);          %不等式右边
        B=-D_bd';                  %不等式右边
        nl=c*n+n;
        Lb=[];
        Lb=zeros(nl,1);          %未知参数下界

        %OF3=ones(1,n);           %ON/OFF系数
        Ub=[M,LL]';
        
        [x,fval,exitflag,ouput,lambda]=linprog(f,A,B,Aeq,Beq,Lb,Ub);
        RL=fval;
        RU=f1*M';
        MRU=RU;
        k=1;
        ni=0;
        StF(k)=MRU;
        [flag,S,H]=fNull(x,n); % H denotes the label, S is the result 
        hfg=1;
        SH=[];
        SS=[];
        SH=H;                      %存储非整数的个数
        SS=S;                      %存储节点的值x value
        UP=[];
        LP=[];
        UP=Ub;
        LP=Lb;
        fge=0;
        if flag==0
            fge=1;
            hfg=0;
        end
else
        XR=zeros(n,1);
        c=cc;
        for i=1:n
            for j=1:length(DM(:,1)) 
                MD=DM(j,:);
                if i==MD(1)
                    XR(i)=XR(i)+MD(2); %数据中心
                end
            end
        end
        Dsm=[];
        for i=1:n
            Tm(i)=max(S_Tt(i,:));
            Dsm(i)=(1./(D-Tm(i)))/u;      
        end
        Dsm=ceil(Dsm);
        XR(1:n)=XR(1:n)+Dsm';
        %XR(n+1:2*n)=ones(n,1);
        XR(n+1:n*c+n)=0;
        for ij=1:length(H1)
            i=H1(ij);                 %端口号
            j=H2(ij);                 %Data center
            nt=n+(i-1)*n+j;
            XR(nt)=Lm(ij);
        end
        rmd=XR(n+1:n+c*n);
        rx=[];
        for j=0:(c-1)
            for i=1:n
               k2=j*n+i;
               rx(j+1,i)=rmd(k2);
            end
        end
        SXR=XR;
        RU=Pr*XR(1:n)*Po;
        Tms(nj,:)=Tm;
        sg=0;
        ftm=0;
end

while (ftm)
while (flag || hfg)
    UbP=[];
    LbP=[];
    UbP=Ub;                          %存储上一次
    LbP=Lb;
    BB=[];
    nh=length(H);                 
    %fh=0;
%     for ih=1:nh
%         m=H(ih);                     % 确定节点分支state variables 
%         if m>=n && m<=2*n
%            m=H(ih);
%            fh=1;
%            nh=0;
%            break;
%         end
%     end
    %if fh==0
       m=H(1);   %H stores the label, S is the result
       ih=1;
    %end
    if hfg==1
       SH(ih)=[];
       SS(ih)=[];
    end
    for T=1:2                         %分枝结果
        if T==1
           Ub(m)=floor(S(ih));        %上界 
           BB(:,T)=Ub;
        else if T==2
          Lb(m)=floor(S(ih))+1;       %未知参数下界
          BB(:,T)=Lb;
        end
        end
    end
    for T=1:2
        if T==1
            Ub=BB(:,T);               %改变上界
            Lb=LbP;                   %下界不变
            [x,fval,exitflag,ouput,lambda]=linprog(f,A,B,Aeq,Beq,Lb,Ub);
            if exitflag>0
               x1=x;
               FF1=fval;
               [flag,S,H]=fNull(x1,n);
               n1=length(S);
               if (flag==0 && FF1<RU)   %flag represents if all are the integers
                   RU=floor(FF1*1000)/1000;
                   XR=x1;
               end
            else
               FF1=inf;
               n1=c*n;              %2n is replaced by n
               x1=[];
            end
        else if T==2
             Ub=UbP;
             Lb=BB(:,T);              %分支下界
             [x,fval,exitflag,ouput,lambda]=linprog(f,A,B,Aeq,Beq,Lb,Ub);
             if exitflag>0
               x2=x;
               FF2=fval;
               [flag,S,H]=fNull(x2,n);  %judge the results if integers
               n2=length(S);
               if (flag==0 && FF2<RU)
                   RU=floor(FF2*1000)/1000;
                   XR=x2;
               end
             else
               FF2=inf;
               n2=c*n;
               x2=[];
             end
            end
        end
    end
   %% 获取最优整数
    if n1==0&&n2==0   %the number of non-integers 
        fz=0; flag=0;
     else fz=1;
    end
    if length(upr)==1 && flag==0
        fz=0;
        x=[];
        flag=1;
    end
    F1=floor(FF1*1000)/1000;
    F2=floor(FF2*1000)/1000;
    Fmin=min(F1,F2);  %%%
    Fmax=max(F1,F2);
    Nmax=max(n1,n2);
    %%%%%构建启发式函数%%%
   if fz==1
   if (Fmin<RU)
       fa=F1/(F1+F2);      %归一化
       fb=F2/(F1+F2);
       na=n1/(n1+n2);
       nb=n2/(n1+n2);
     if (fa+na)<(fb+nb)    %评价函数
        x=x1;
        Ub=BB(:,1);        %分支的选择
        Lb=LbP;
       if F2<RU
        StX(:,k)=x2;
        StF(k)=F2;
        SUb(:,k)=UbP;
        SLb(:,k)=BB(:,2);
        k=k+1;
       end
     else   
        x=x2;              %分支下界
        Lb=BB(:,2);
        Ub=UbP;
        if F1<RU
          StX(:,k)=x1;
          StF(k)=F1;
          SUb(:,k)=BB(:,1);
          SLb(:,k)=LbP;
          k=k+1;
        end
      end
    [flag,S,H]=fNull(x,n);
      else flag=0;
    end
   end
    if (flag==0)            %求出可行解
      [minF,ni]=min(StF);
      if (length(minF)>=1) && (RU>minF) && (minF<MRU)  %if search end?
          x=StX(:,ni);
          Ub=SUb(:,ni);
          Lb=SLb(:,ni);
          StF(ni)=[];
          StX(:,ni)=[];
          SUb(:,ni)=[];
          SLb(:,ni)=[];
          k=k-1;
      else x=[];
      end
    end
    [flag,S,H]=fNull(x,n);
    if (isempty(XR)==1) && (isempty(x)==1) && (isempty(SH)~=1)
        hfg=1;                         %判断节点搜索是否有效
        H=SH;
        S=SS;
        Ub=UP;
        Lb=LP;
      else hfg=0;
    end
    display('-----the first runing---------');
end
%%%%%一次分支定界结束%%%%%
k=1;                 
StX=[];
SUb=[];
SLb=[];
StF=[];
SS=[];
SH=[];
if fge==1
    XR=x;
end
rmd=XR(n+1:n+c*n);
SXR=XR;
XR=[];
rx=[];
rxt=[];
for j=0:(c-1)
    for i=1:n
        k2=j*n+i;
        rx(j+1,i)=rmd(k2);
    end
end
rxt=rx';                       %矩阵还原
SHg=Hg;                        %存储上次的值
Hg=sum(rx);                    %到某一个数据中心的负载数目
fg=1;
%%%%%%找出匹配的最大延时%%%%%%%
ti=1;
Tt=YTT;
if xh==0
    for i=1:n
        while (fg)
        [tm,ri]=max(Tt');      %某一个数据中心最大延时的大小和位置
          kk=ri(i);
          if rxt(i,kk)>0.001    %最大值对应的rmd
            Tm(i)=tm(i);       
            fg=0;
          else 
               Tt(i,kk)=0; 
               Ty=Tt(i,:);
               if all(Ty<=0)
                   Tm(i)=0;
                   fg=0;
               end
          end     
        end
        fg=1;
    end  
  if sg==1   %有单独流向,增加延时
     for s=1:length(sm(:,1))
         sf=sm(s,:);
         if Tm(sf(1))<sf(2)
            Tm(sf(1))=sf(2);
         end
     end
  end
end
  
  if isequal(STm,Tm)==1      %主要是判断延时加上去以后是否变化
   ftm=0;
   flag=0;
  else
       flag=1;
       tmc=tmc+1;             %记录不一样的次数
  end
  if tmc<KK && isequal(STm,Tm)==0
     STm=Tm;                  %存储上一次的最大延时
  end
  %% 振荡消除
    if tmc>=KK && isequal(STm,Tm)==0 %表明在振荡
      for mi=1:n
          if STm(mi)>=Tm(mi)
              Dtm(mi)=STm(mi);   %存储大的转移延时
          else
              Dtm(mi)=Tm(mi);
          end
      end
      Tm=Dtm;                     %最后一次运行程序
      STm=Dtm;
      tmc=0;
      xh=1;
  end
  %%%%%加入延时%%%%%%%%%
 if ftm~=0
    RU=f1*M';
    StF(k)=RU;
    Dy=(D-Tm)';  
%   OF1=diag(1./Dy);         %ON/OFF的系数
%   A1=[m2,OF1,Rmd2];        %第二个约束条件：延时分析
   A=[m2,Rmd2];
   B=-(1./Dy)';
%   A=[A1;A2];
   Lb=zeros(nl,1);          %未知参数下界
%   Ub=[M,OF3,LL]';
   Ub=[M,LL]';
   [x,fval,exitflag,ouput,lambda]=linprog(f,A,B,Aeq,Beq,Lb,Ub);
   RL=fval;
   [flag,S,H]=fNull(x,n);
   SS=S;
   SH=H;
   UP=Ub;
   LP=Lb;
  if flag==0
     RU=fval;
     ftm=0;
     XR=x;
     rmd=XR(n+1:n+c*n);
     rx=[];
     for j=0:(c-1)
       for i=1:n
        k2=j*n+i;
        rx(j+1,i)=rmd(k2);
       end
     end
  end
 end 
end    %循环结束
%%%%%%%%%%%%%%%%%%%%%%%%%
rxt=[];
FRU=0;
Tms(nj,:)=Tm;
if sg==1
    XRb=find(SXR(1:n)<0.1); 
    S_M=intersect(XRb,H2);          %数据中心
    Dsm=[];                         %某一些唯一流向的数据中心补延时
    for i=1:length(S_M)
        xt=S_M(i);
        Dsm=(1./(D-Tm(xt)))/u;      
        Dsm=ceil(Dsm);
        mt=find(DM(:,1)==xt);
        DM(mt,2)=DM(mt,2)+Dsm;
    end
end
if sg==1    %表明有负载单独流向数据中心
    for i=1:length(H1)
        Dm=DM(i,:);                  %序号和数目大小
        FRU=Dm(2)*Po*Pr(Dm(1))+FRU;
        SXR(Dm(1))=Dm(2)+SXR(Dm(1));
        j=H1(i);                     %端口号
        t=H2(i);                     %IDC号
        Fz=zeros(1,n);
        Fz(t)=Lm(i);
        r=length(rx(:,1));
        if j<=r
           rxj=rx([1:j-1],:);
           rxc=rx([j:r],:);
           rx=[rxj;Fz;rxc];
           r=r+1;
        else rx=[rx;Fz];
        end
    end
    RU=FRU+RU;
end
Fva=[Fva,RU];
ECost=Fva';                        %cost
STM(nj,:)=ceil(SXR(1:n));                %服务器数目
Ld(:,:,nj)=rx';                    % 第i个前端服务器到IDC
D1(nj,:)=rx(1,:);       
D2(nj,:)=rx(2,:);
D3(nj,:)=rx(3,:); 
D4(nj,:)=rx(4,:); 
h=h+1;
end
% xlswrite('D1',D1);
% xlswrite('D2',D2);
% xlswrite('D3',D3);
% xlswrite('D4',D4);      
xlswrite('M_FBB',STM);      %server
xlswrite('Fva_HBBF',Fva');  %cost
xlswrite('Time_HBBF',Tms);  %time storage
display('-----the running is OK------');
toc
%% ----------作图------------
figure (1)  %%%每天的电费
ECost=ECost*3600;
plot(1:h,ECost,'go--','MarkerEdgeColor','g','MarkerFaceColor','k','LineWidth',1.5,'MarkerSize',8.4);
xlabel('Time (GMT-08:00) on May 25th, 2012. (Hour)','Fontsize',13);
ylabel('Hourly Electricity Cost ($)','Fontsize',13);
set(gca,'fontsize',13)
grid on

%%%服务器打开数目
figure(2)
plot(1:h,STM(:,1),'go--','MarkerEdgeColor','g','MarkerFaceColor','k','LineWidth',1.4,'MarkerSize',8.4);
hold on
plot(1:h,STM(:,2),'bp--','MarkerEdgeColor','b','MarkerFaceColor','w','LineWidth',1.4,'MarkerSize',8.4);
hold on
plot(1:h,STM(:,3),'rs--','MarkerEdgeColor','r','MarkerFaceColor','y','LineWidth',1.4,'MarkerSize',8.4);
set(gca,'fontsize',13)
hh=legend('Mountain View, CA','Atlanta, GA','Houston, TX');
set(hh,'Fontsize',12);
xlabel('Time (GMT-08:00) on June 23th, 2013 (Hour).','Fontsize',12);
ylabel('Number of Active Servers','Fontsize',12)
grid on
% 
% %%端口1负载分布情况
% figure (3)
% plot(1:h,D1(:,1),'go--','MarkerEdgeColor','g','MarkerFaceColor','k','LineWidth',1.4,'MarkerSize',8.4);
% hold on
% plot(1:h,D1(:,2),'p--','MarkerEdgeColor','b','MarkerFaceColor','w','LineWidth',1.4,'MarkerSize',8.4);
% hold on
% plot(1:h,D1(:,3),'rs--','MarkerEdgeColor','r','MarkerFaceColor','y','LineWidth',1.4,'MarkerSize',8.4);
% set(gca,'fontsize',14)
% h1=legend('\lambda_{11}','\lambda_{12} ','\lambda_{13}');
% set(h1,'Fontsize',13);
% xlabel('Time (GMT-08:00) on May 25th, 2012. (Hour)','Fontsize',14);
% ylabel('Requests','Fontsize',14);
% grid on
% 
% %%%%端口2的数据分布情况
% figure (4)
% plot(1:h,D2(:,1),'go--','MarkerEdgeColor','g','MarkerFaceColor','k','LineWidth',1.4,'MarkerSize',8.4);
% hold on
% plot(1:h,D2(:,2),'p--','MarkerEdgeColor','b','MarkerFaceColor','w','LineWidth',1.4,'MarkerSize',8.4);
% hold on
% plot(1:h,D2(:,3),'rs--','MarkerEdgeColor','r','MarkerFaceColor','y','LineWidth',1.4,'MarkerSize',8.4);
% set(gca,'fontsize',14)
% h1=legend('\lambda_{21}','\lambda_{22} ','\lambda_{23}');
% set(h1,'Fontsize',13);
% xlabel('Time (GMT-08:00) on May 25th, 2012. (Hour)','Fontsize',14);
% ylabel('Requests','Fontsize',14);
% grid on
% 
% %%%%端口3的数据分布情况
% figure (5)
% plot(1:h,D3(:,1),'go--','MarkerEdgeColor','g','MarkerFaceColor','k','LineWidth',1.4,'MarkerSize',8.4);
% hold on
% plot(1:h,D3(:,2),'p--','MarkerEdgeColor','b','MarkerFaceColor','w','LineWidth',1.4,'MarkerSize',8.4);
% hold on
% plot(1:h,D3(:,3),'rs--','MarkerEdgeColor','r','MarkerFaceColor','y','LineWidth',1.4,'MarkerSize',8.4);
% set(gca,'fontsize',14)
% h1=legend('\lambda_{31}','\lambda_{32} ','\lambda_{33}');
% set(h1,'Fontsize',13);
% xlabel('Time (GMT-08:00) on May 25th, 2012. (Hour)','Fontsize',14);
% ylabel('Requests','Fontsize',14);
% grid on
% 
% %%%%端口4的数据分布情况
% figure (6)
% plot(1:h,D4(:,1),'go--','MarkerEdgeColor','g','MarkerFaceColor','k','LineWidth',1.4,'MarkerSize',8.4);
% hold on
% plot(1:h,D4(:,2),'p--','MarkerEdgeColor','b','MarkerFaceColor','w','LineWidth',1.4,'MarkerSize',8.4);
% hold on
% plot(1:h,D4(:,3),'rs--','MarkerEdgeColor','r','MarkerFaceColor','y','LineWidth',1.4,'MarkerSize',8.4);
% set(gca,'fontsize',14)
% h1=legend('\lambda_{41}','\lambda_{42} ','\lambda_{43}');
% set(h1,'Fontsize',13);
% xlabel('Time (GMT-08:00) on May 25th, 2012. (Hour)','Fontsize',14);
% ylabel('Requests','Fontsize',14);
% grid on

