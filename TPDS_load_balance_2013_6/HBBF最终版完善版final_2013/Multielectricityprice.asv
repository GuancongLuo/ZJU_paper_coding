clc,clear;                 %多元化电价下数据中心负载实时调度监控管理仿真平台 启发式算法
tic
format short               %线性规划问题
M=[5000 4000 4000];        %数据中心服务器最大数目   
%Pr=[20 28 25];             % 表示电价input 
%L=[29829 50380 39977 20109];
Pr1=[58 25.5 25.5;58 22 23;58 21 23;58 21 22.8;58 20 22.5;58 19.2 27;58 20 33;58 21 36;58 23 38;58 21.8 42;...
    58 37 62;58 38 62.5;58 39 79;58 40 71;58 35 59;58 33 52;58 32 42;58 32 44;58 30 43;58 26 42;58 25 43;58 24 40;...
    58 23 40;58 21 38];       % 表示电价input
%%%%%%转移延时%%%%%%%%%%%
DL1=[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;64 50 45 40 42 56 60 80 79 90 92 94 110 108 100 99 80 83 97 83 80 90 81 78;...
     94 80 75 84 72 76 96 96 89 99 100 108 110 103 112 111 92 109 107 74 90 82 91 76;54 50 46 47 40 59 68 69 75 71 81 78 85 85 88 79 87 96 77 74 76 62 61 65]/1000;
DL2=[64 50 45 40 42 56 60 80 79 90 92 94 110 108 100 99 80 83 97 83 80 90 81 78;0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;...
     34 40 35 37 42 56 66 76 72 79 93 98 90 83 91 81 82 89 67 75 77 79 62 58;44 40 49 37 48 69 58 69 95 96 98 100 105 95 89 93 96 86 72 71 73 56 51 55]/1000;
DL3=[94 80 75 84 72 76 96 96 89 99 100 108 110 103 112 111 92 109 107 74 90 82 91 76;34 40 35 37 42 56 66 76 72 79 103 98 88 93 91 81 82 89 67 75 77 79 62 50;...
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;34 37 49 27 38 39 48 59 65 90 71 88 85 88 87 63 74 67 75 78 68 56 41 45]/1000;
% L1=30000*ones(1,24);
% L2=40000*ones(1,24);
% L3=40000*ones(1,24);
% L4=30000*ones(1,24);
L1=xlsread('L1');
L2=xlsread('L2');
L3=xlsread('L3');
L4=xlsread('L4');
%np=length(Pr1(:,1));
Fva=[];
for nj=1:1
StX=[];
SUb=[];
SLb=[];
StF=[];
Aeq=[];
Beq=[];
Pr=Pr1(nj,:);
L=[L1(nj) L2(nj) L3(nj) L4(nj)];         %input
%L=[29791 49792 39738 20020];              %长时间运行
n=length(M);                              %表示数据中心的个数
c=length(L);                              %表示前端服务器
D=0.1;                                    %延时上界 
Tt=[DL1(:,nj)';DL2(:,nj)';DL3(:,nj)'];
%Tt=[0 0.15 0.1 0.12;0.25 0 0.12 0.18;0.12 0.03 0 0.1];  %Transfer Delay
%Tm=[0 0.0690 0.0760];
% Tm=[0 0.0 0.0];
STm=[];
u=20;     
upr=unique(Pr);            %判断电价是否相同
DL=M*u;                    %服务器最大处理能力
Po=133.99/10^6;                     %功率
Beq=L';
LL=[];
for i=1:c
Lp(1:n)=L(i);
LL=[LL,Lp];
end
Aq1=[];
ki=0;
Bq1=[];
cnt=0;
%%%%%延时处理%%%%%%
for i=1:n
    for j=1:c
        if Tt(i,j)>=D*0.95
            ki=ki+1;
            Aq1(ki,:)=zeros(1,2*n+c*n);
            Tt(i,j)=0;
            ij=(j-1)*n+i;
            Aq1(ki,ij+2*n)=1;
            Bq1(ki)=0;
        end
    end
end                     %选择不能流向负载的数据线路
%%%%%%%%%%%%%延时处理结束%%%%%%%%%%%
ftm=1;
f1=Pr*Po;               %目标函数多项式系数
f2=zeros(1,c*n+n);
f=[f1,f2];
MOF=zeros(c,2*n);       
Rmd1=[];
xs=ones(1,n);           %产生n个1 
for i1=1:c
    ZL=zeros(c,n);      %全是0阵列
    ZL(i1,:)=xs;    
    Rmd1=[Rmd1,ZL];
end
Aeq=[Aq1;MOF,Rmd1];      %第一个约束条件: 负载守恒
Beq=[Bq1';Beq]; 

Dy=(D-Tm)';              %%%%%延时处理
Rm2=eye(n,n);            %rmd 的系数
Rmd2=[];
for i=1:c
    Rmd2=[Rmd2,Rm2];
end
m2=-u*eye(n,n);          %m的系数
OF1=diag(1./Dy);         %ON/OFF的系数
A1=[m2,OF1,Rmd2];        %第二个约束条件：延时分析

OF2=-diag(DL);           %ON/OFF的系数
m3=zeros(n,n);
A2=[m3,OF2,Rmd2];        %第三个约束条件，附加约束

A=[A1;A2];
B=zeros(2*n,1);          %不等式右边
nl=c*n+2*n;
Lb=zeros(nl,1);          %未知参数下界

OF3=ones(1,n);           %ON/OFF系数
Ub=[M,OF3,LL]';
nc=min(n,c);
if length(upr)==1
   for i=1:nc
   ii=(i-1)*n+i;
   if (DL(i)-1/D)>L(i)
       B3(i)=L(i);
       Aq2(i,ii+2*n)=1;
   else 
        B3(i)=(DL(i)-1/D);
        Aq2(i,ii+2*n)=1;
   end  
   end
   Aeq=[Aeq;Aq2];
   Beq=[Beq;B3']; 
end                     %电价相同负载分配情况
[x,fval,exitflag,ouput,lambda]=linprog(f,A,B,Aeq,Beq,Lb,Ub);
RL=fval;
RU=f1*M';
MRU=RU;
k=1;
ni=0;
StF(k)=MRU;
[flag,S,H]=fNull(x);  
fge=0;
if flag==0
    fge=1;
end
while (ftm)
while (flag)
    UbP=Ub;                        %存储上一次
    LbP=Lb;
    BB=[];
    for T=1:2                      %分枝结果
        Ubt=Fub(S,H,T,Lb,Ub);
        BB(:,T)=Ubt;
    end
    for T=1:2
        if T==1
            Ub=BB(:,T);             %改变上界
            Lb=LbP;                 %下界不变
            [x,fval,exitflag,ouput,lambda]=linprog(f,A,B,Aeq,Beq,Lb,Ub);
            if exitflag>0
               x1=x;
               F1=fval;
               [flag,S,H]=fNull(x1);
               n1=length(S);
               if (flag==0 && F1<RU)
                   RU=F1;
                   XR=x1;
               end
            else
               F1=inf;
               n1=c*n+2*n;
            end
        else if T==2
             Ub=UbP;
             Lb=BB(:,T);            %下界
             [x,fval,exitflag,ouput,lambda]=linprog(f,A,B,Aeq,Beq,Lb,Ub);
             if exitflag>0
               x2=x;
               F2=fval;
               [flag,S,H]=fNull(x2);
               n2=length(S);
               if (flag==0 && F2<RU)
                   RU=F2;
                   XR=x2;
               end
             else
               F2=inf;
               n2=c*n+2*n;
             end
            end
        end
    end
    %% 获取最优整数
    if n1==0&&n2==0
        fz=0;
     else fz=1;
    end
    if length(upr)==1 && flag==0
        fz=0;
        x=[];
        flag=1;
    end
    Fmin=min(F1,F2);  %%%
    Fmax=max(F1,F2);
    Nmax=max(n1,n2);
    %%%%%启发式函数
   if fz==1
   if (Fmin<RU)
       fa=F1/(F1+F2);  %归一化
       fb=F2/(F1+F2);
       na=n1/(n1+n2);
       nb=n2/(n1+n2);
     if (fa+na)<(fb+nb)    %评价函数
        x=x1;
        Ub=BB(:,1);        %分支的选择
        Lb=LbP;
       if F2<RU
        StX(:,k)=x2;
        StF(k)=F2;
        SUb(:,k)=UbP;
        SLb(:,k)=BB(:,2);
        k=k+1;
       end
     else   
        x=x2;              %下界
        Lb=BB(:,2);
        Ub=UbP;
        if F1<RU
          StX(:,k)=x1;
          StF(k)=F1;
          SUb(:,k)=BB(:,1);
          SLb(:,k)=LbP;
          k=k+1;
        end
      end
    [flag,S,H]=fNull(x);
      else flag=0;
    end
   end
    if (flag==0)          %求出可行解
      [minF,ni]=min(StF);
      if (RU>minF) & (length(minF)>=1)
          x=StX(:,ni);
          Ub=SUb(:,ni);
          Lb=SLb(:,ni);
          StF(ni)=[];
          StX(:,ni)=[];
          SUb(:,ni)=[];
          SLb(:,ni)=[];
          k=k-1;
      else x=[];
      end
    end
    [flag,S,H]=fNull(x);
    display('--------------');
end
%%%%%清空%%%%%%%%%%一次结束%%%%
k=1;                 
StX=[];
SUb=[];
SLb=[];
StF=[];
%%%%%%%%%%%%%%%
if fge==1
    XR=x;
end
rmd=XR(2*n+1:2*n+c*n);
for j=0:(c-1)
    for i=1:n
        k2=j*n+i;
        rx(j+1,i)=rmd(k2);
    end
end
rxt=rx';                  %矩阵还原
Hg=zeros(1,n);
SHg=Hg;                   %存储上次的值
Hg=sum(rx);               %到某一个数据中心的负载数目
fg=1;
%%%%%%找出匹配的最大延时%%%%%%%
ti=1;
for i=1:n
    while (fg)
    [tm,ri]=max(Tt');      %某一个数据中心最大延时的大小和位置
      kk=ri(i);
      if rxt(i,kk)>0.0001  %最大值对应的rmd
        Tm(i)=tm(i);       
        %Stp(ti,:)=[i,kk];  %存储位置
        %ti=ti+1;
        fg=0;
      else 
           Tt(i,kk)=0;
           if all(Tt(i,:))==0
               Tm(i)=0;
               fg=0;
           end
      end     
    end
    fg=1;
end
  if isequal(STm,Tm)==1   %主要是判断延时加上去以后是否变化
   ftm=0;
   flag=0;
  else
   STm=Tm;                %存储上一次的最大延时
   flag=1;
  end
  %%%%%加入延时%%%%%%%%%
 if ftm~=0
  RU=f1*M';
  StF(k)=RU;
  Dy=(D-Tm)';  
  OF1=diag(1./Dy);         %ON/OFF的系数
  A1=[m2,OF1,Rmd2];        %第二个约束条件：延时分析
  A=[A1;A2];
  Lb=zeros(nl,1);          %未知参数下界
  Ub=[M,OF3,LL]';
  [x,fval,exitflag,ouput,lambda]=linprog(f,A,B,Aeq,Beq,Lb,Ub);
  RL=fval;
  [flag,S,H]=fNull(x);
  if flag==0
     RU=fval;
     ftm=0;
     XR=x;
     rmd=XR(2*n+1:2*n+c*n);
     for j=0:(c-1)
       for i=1:n
        k2=j*n+i;
        rx(j+1,i)=rmd(k2);
       end
     end
  end
end
  %%%%振荡消除%%%%%%
  for ie=1:n
    if abs(Hg(i)-SHg(i))>0.5*SHg(i)
        cnt=1+cnt;
        break;
    end
  end
  if cnt>=5
    ftm=0;
  end
end
Tms(nj,:)=Tm;
Fva=[Fva,RU];
STM(nj,:)=XR(1:n);       %服务器数目
Ld=rx;                   % 第i个前端服务器到IDC
D1(nj,:)=rx(1,:);       
D2(nj,:)=rx(2,:); 
D3(nj,:)=rx(3,:); 
D4(nj,:)=rx(4,:); 
% rxt=rx'
% deT=Tt
% mms=STM(nj,:)
% Tmm=Tm
% HId=sum(rx)
% f=RU
end
% xlswrite('D1',D1);
% xlswrite('D2',D2);
% xlswrite('D3',D3);
% xlswrite('D4',D4);      
% xlswrite('M2',STM);
% xlswrite('Fv2',Fva);
% xlswrite('maxT',Tms);
display('-----OK------');
toc