clc,clear;                    %多元化电价下数据中心负载实时调度监控管理仿真平台 启发式算法
tic
format short                  %线性规划问题
M=[5000 4000 4000];           %数据中心服务器最大数目   
%Pr=[58.5 25.5 25.5];         % 表示电价input
Pr1=[58 25.5 25.5;58 22 23;58 21 23;58 21 22.8;58 20 22.5; 58 19.2 27; 58 20 33;58 21 36;58 23 38;58 21.8 42;...
    58 37 62;58 38 62.5;58 39 79;58 40 71;58 35 59;58 33 52;58 32 42;58 32 44;58 30 43;58 26 42;58 25 43;58 24	40;...
    58 23 40;58 21 38];       % 表示电价input
L1=poissrnd(30000,1,24);
L2=poissrnd(50000,1,24);
L3=poissrnd(40000,1,24);
L4=poissrnd(20000,1,24);
xlswrite('L1',L1');
xlswrite('L2',L2');
xlswrite('L3',L3');
xlswrite('L4',L4');
% L1=xlsread('L1');
% L2=xlsread('L2');
% L3=xlsread('L3');
% L4=xlsread('L4');
np=length(Pr1(:,1));
Fval=[];
for nj=1:24
StX=[];
Ub=[];
Lb=[];
SUb=[];
SLb=[];
StF=[];
Pr=Pr1(nj,:);
L=[L1(nj), L2(nj), L3(nj),L4(nj)];   %input
% L=[30137 50199 39653 19941];
n=length(M);                  %表示数据中心的个数
c=length(L);                  %表示前端服务器
D=0.1;                        %延时上界 
%%%%延时处理%%%%%
Tm=[0 0 0];
u=20;     
upr=unique(Pr);               %判断电价是否相同
DL=M*u;                       %服务器最大处理能力
Po=20;                        %功率
Beq=L';
LL=[];
for i=1:c
Lp(1:n)=L(i);
LL=[LL,Lp];
end
Aq1=[];
ki=0;
Bq1=[];
f1=Pr*Po;               %目标函数多项式系数
f2=zeros(1,c*n+n);
f=[f1,f2];
MOF=zeros(c,2*n);       
Rmd1=[];
xs=ones(1,n);           %产生n个1 
for i1=1:c
    ZL=zeros(c,n);      %全是0阵列
    ZL(i1,:)=xs;    
    Rmd1=[Rmd1,ZL];
end
Aeq=[MOF,Rmd1;Aq1];      %第一个约束条件: 负载守恒
Beq=[Beq;Bq1']; 
Dy=(D-Tm)';              %%%%%延时处理
Rm2=eye(n,n);            %rmd 的系数
Rmd2=[];
for i=1:c
    Rmd2=[Rmd2,Rm2];
end
m2=-u*eye(n,n);          %m的系数
OF1=diag(1./Dy);         %ON/OFF的系数
A1=[m2,OF1,Rmd2];        %第二个约束条件：延时分析

OF2=-diag(DL);           %ON/OFF的系数
m3=zeros(n,n);
A2=[m3,OF2,Rmd2];        %第三个约束条件，附加约束

A=[A1;A2];
B=zeros(2*n,1);          %不等式右边
nl=c*n+2*n;
Lb=zeros(nl,1);          %未知参数下界
OF3=ones(1,n);           %ON/OFF系数
Ub=[M,OF3,LL]';
nc=min(n,c);
if length(upr)==1
   for i=1:nc
   ii=(i-1)*n+i;
   if (DL(i)-1/D)>L(i)
       B3(i)=L(i);
       Aq2(i,ii+2*n)=1;
   else 
        B3(i)=(DL(i)-1/D);
        Aq2(i,ii+2*n)=1;
   end  
   end
   Aeq=[Aeq;Aq2];
   Beq=[Beq;B3']; 
end                     %电价相同负载分配情况
[x,fval,exitflag,ouput,lambda]=linprog(f,A,B,Aeq,Beq,Lb,Ub);
RL=fval;
RU=f1*M';
MRU=RU;
NU=3*n;
NL=0;
k=1;
ki=0;
StF(k)=MRU;
[flag,S,H]=fNull(x);
while (flag)
    UbP=Ub;                        %存储上一次
    LbP=Lb;
    BB=[];
    for T=1:2                      %分枝结果
        Ubt=Fub(S,H,T,Lb,Ub);
        BB(:,T)=Ubt;
    end
    for T=1:2
        if T==1
            Ub=BB(:,T);             %改变上界
            Lb=LbP;                 %下界不变
            [x,fval,exitflag,ouput,lambda]=linprog(f,A,B,Aeq,Beq,Lb,Ub);
            if exitflag>0
               x1=x;
               F1=fval;
               [flag,S,H]=fNull(x1);
               n1=length(S);
               if (flag==0 && F1<RU)
                   RU=F1;
                   XR=x1;
               end
            else
               F1=inf;
               n1=3*n;
            end
        else if T==2
             Ub=UbP;
             Lb=BB(:,T);            %下界
             [x,fval,exitflag,ouput,lambda]=linprog(f,A,B,Aeq,Beq,Lb,Ub);
             if exitflag>0
               x2=x;
               F2=fval;
               [flag,S,H]=fNull(x2);
               n2=length(S);
               if (flag==0 && F2<RU)
                   RU=F2;
                   XR=x2;
               end
             else
               F2=inf;
               n2=3*n;
             end
            end
        end
    end
    %% 获取最优整数
    if n1==0&&n2==0
        fz=0;
     else fz=1;
    end
    if length(upr)==1 && flag==0
        fz=0;
        x=[];
        flag=1;
    end
    Fmin=min(F1,F2);  %%%
    Fmax=max(F1,F2);
    Nmax=max(n1,n2);
    %%%%%启发式函数
   if fz==1
   if (Fmin<RU)
       fa=F1/(F1+F2);  %归一化
       fb=F2/(F1+F2);
       na=n1/(n1+n2);
       nb=n2/(n1+n2);
     if (fa+na)<=(fb+nb)    %评价函数
        x=x1;
        Ub=BB(:,1);        %分支的选择
        Lb=LbP;
       if F2<RU
        StX(:,k)=x2;
        StF(k)=F2;
        SUb(:,k)=UbP;
        SLb(:,k)=BB(:,2);
        k=k+1;
       end
     else   
        x=x2;              %下界
        Lb=BB(:,2);
        Ub=UbP;
        if F1<RU
          StX(:,k)=x1;
          StF(k)=F1;
          SUb(:,k)=BB(:,1);
          SLb(:,k)=LbP;
          k=k+1;
        end
      end
    [flag,S,H]=fNull(x);
      else flag=0;
    end
   end
   
    if (flag==0)          %求出可行解
      [minF,ni]=min(StF);
      if RU>minF
          x=StX(:,ni);
          Ub=SUb(:,ni);
          Lb=SLb(:,ni);
          StF(ni)=[];
          StX(:,ni)=[];
          SUb(:,ni)=[];
          SLb(:,ni)=[];
          k=k-1;
      end
    end
    [flag,S,H]=fNull(x);
    display('-++++++--');
end
rmd=XR(2*n+1:2*n+c*n);
for j=0:(c-1)
    for i=1:n
        k2=j*n+i;
        rx(j+1,i)=rmd(k2);
    end
end
Fval=[Fval,RU];          %最小值存储
STM(nj,:)=XR(1:n);       %服务器数目
Ld=rx;                   % 第i个前端服务器到IDC
% rxt=rx'
% Ff=RU
% mw=STM(nj,:)
IDC1(nj,:)=rxt(1,:);       
IDC2(nj,:)=rxt(2,:); 
IDC3(nj,:)=rxt(3,:); 
DS1(nj,:)=rx(1,:);       
DS2(nj,:)=rx(2,:); 
DS3(nj,:)=rx(3,:); 
DS4(nj,:)=rx(4,:);        
%rxt=rx';                %矩阵还原，第j个IDC接收的负载情况
Hg=sum(rx)              %到某一个数据中心的负载数目
end
xlswrite('DS1',DS1);
xlswrite('DS2',DS2);
xlswrite('DS3',DS3);
xlswrite('DS4',DS4);  
xlswrite('IDC1',DS1);
xlswrite('IDC2',DS2);
xlswrite('DS3',DS3);
xlswrite('DS4',DS4);
xlswrite('Mc',STM);
xlswrite('Fv',Fval);
toc