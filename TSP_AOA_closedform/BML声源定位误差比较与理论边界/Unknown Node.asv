clc,clear
clc;  %%%利用静态声源辅助实现单个未知节点定位WLS
clear all
format long
close all

%% 设定全局变量
global SIGMA
%% 设定基本的参数，比如蒙特卡洛的个数，DOA误差范围，声源个数等参数
M = 10000;                        %Monte Caro times
NumSource =9;           %声源的个数
% Beacon1=round(rand(100,2)*200);
% Beacon2=round(rand(100,1)*pi*10)/10;
% Beacon=[Beacon1 Beacon2];
Beacon=[10,10,pi/6;170,40,pi/5;90,110,pi/3;15,180,pi/4]; %Beacon=[10,10,pi/6;170,40,pi/5;90,110,pi/3;15,180,pi/4];
Bl=length(Beacon(:,1));           %信标个数 Beacon=[10,20,pi/3;0,160,pi/6;170,190,pi/5;130,10,pi/4;60,100,pi/5];
Unodes=[170,120,pi/3];              %未知节点的位置信息Unodes=[170,120,pi/3]; 
R=100;                            %感知半径
threshold = 150;
err=6;
%% 在不同声源数目下进行定位
 for ii=1:length(NumSource)
    ASource=NumSource(ii);
    z=0;
    for SIGMA = 1: 1 : err
        num=0;
        nm=0;
        for i=1:M    
            SLocation=round(rand(ASource,2)*200); %多个声源位置分布200*200
            kk=1;
            ei=0;
            pi1=0;
            SPbias=[];
            S_Source=[];
            A_Source=[];
     %% 信标定位静态声源与未知节点%%%%%%%%
            for j=1: ASource
                for k=1:Bl
                    BBeacon=Beacon(k,:);           %信标信息
                    SSource=SLocation(j,:);        %声源信息
                    if sqrt((SSource(1)-BBeacon(1))^2+(SSource(2)-BBeacon(2))^2)<=R   %感知半径范围之内
                       [XITA,Accu_Ang]= Current_Radian(SSource,BBeacon); % 测声源的DOA值子函数
                       XXITA(kk)=XITA+BBeacon(3);                        %绝对坐标系下的角度
                       AXXITA(kk)=Accu_Ang;                              %准确的角度
                       Beacon_use(kk,:)= BBeacon;                        %能够测到的信标节点
                       kk=kk+1;
                    end
                end
     %% 信标节点对静态声源进行定位
                 if (kk-1)>=2
                    Spt = TLS_Single(XXITA,Beacon_use(:,1:2));    %声源位置估计子函数   %声源估计位置存储
                    pc=sqrt((SSource(1)-Spt(1))^2+(SSource(2)-Spt(2))^2); %位置偏差
                    if all(Spt==0)~=1 && pc<threshold  %设定阈值
                       ei=ei+1;
                       pi1=pi1+1;
                       SPbias(pi1)=pc;
                       ErrL= Expect_P(AXXITA,Beacon_use(:,1:2),SSource);   %理论位置
                       S_Source(ei,:)=Spt;  %已经定位的声源存储
                       T_Source(ei,:)=ErrL; %理论位置存储
                       A_Source(ei,:)=SSource;%%准确位置
                    end
                 end
                 XXITA=[];
                 Beacon_use=[];   
                 kk=1;             
            end
            if isempty(SPbias)~=1
                nm=nm+1;
                SPavg(nm)=mean(SPbias);  %一次操作声源平均偏差            
            end

 %% %%%%%%%%%%% 未知节点对声源和信标节点的DOA测量值%%%%%%%%%%%%%%%%%%%%
           S_Bcon=Beacon(:,1:2); 
            ku=0;
            Ns=0;%声源个数
            if isempty(S_Source)==1
                jj=0;
            else
                jj=length(S_Source(:,1));
            end
            for iu=1:jj
                 BSL=A_Source(iu,:);           %已定位的声源和信标准确位置
                 E_BSL=S_Source(iu,:);         %估计位置
                 E_TSL=T_Source(iu);           %理论估计位置
                 if sqrt((BSL(1)-Unodes(1))^2+(BSL(2)-Unodes(2))^2)<=R                       
                       ku=ku+1;
                       Ns=Ns+1;
                       DOA(ku)= Current_Radian(BSL,Unodes);   % 测得的带有噪声DOA值
                       SBStore(ku,:)=E_BSL;                   %声源估计位置存储
                       TBStore(ku,:)=E_TSL;                   %理论位置估计存储
                 end
            end
            Nb=0;
            for ib=1:length(S_Bcon(:,1))
                 BL=S_Bcon(ib,:);                           %已知信标
                 if sqrt((BL(1)-Unodes(1))^2+(BL(2)-Unodes(2))^2)<=R                       
                       ku=ku+1;
                       Nb=Nb+1;
                       DOA(ku)= Current_Radian(BL,Unodes);   % 测得的带有噪声DOA值
                       SBStore(ku,:)=BL;    %声源估计位置存储
                       TBStore(ku,:)=BL;
                 end
            end
            if ku>=3
  %% 用已知的声源对未知节点进行定位
                [P_Bias, H_Bias] = PLS(SBStore,DOA,Unodes(1:2),Unodes(3));%使用Psedo-Linear Least Squares.
                if  P_Bias< threshold
                    num= num + 1;
                    [TP_Bias,TH_Bias]=Thy_Node(SBStore,DOA,Unodes);
                    PLS_PBias(num) = P_Bias;  %存储结果，运行次数num
                    PLS_HBias(num) = H_Bias;
                    TPLS_PBias(num)= TP_Bias; 
                    TPLS_HBias(num)= TH_Bias;
                end
            end
            DOA=[];
            SBStore=[];
        end
        display('------the programming is running now-----');
        z=z+1;
        PBIAS(z) = mean(PLS_PBias); %位置误差
        TPBIAS(z) =mean(TPLS_PBias);    %位置方差
        HBIAS(z)= mean(PLS_HBias);
        THBIAS(z) =mean(TPLS_HBias);    %角度方差
        SPavg=[];
        PLS_PBias=[];
        PLS_HBias=[];
    end
    
 end
Sigma=1:err;
%% 数据存储
xlswrite('PLE_PE',PBIAS);%位置误差保存
xlswrite('PLE_HE',HBIAS);%角度误差保存
xlswrite('TPLE_PE',TPBIAS);
xlswrite('TPLE_HE',THBIAS);

%% 图形显示2  节点方差
figure(1)
subplot(2,1,1)
plot(Sigma,PBIAS,'b*--', Sigma,TPBIAS(2,:),'go--','linewidth',1.5);
set(gca,'Fontsize',14)
legend('Real','K=11','K=13','K=15');
xlabel('Bearing Noise Standard Deviation (degree)');
ylabel('Location Error (m)');
xlim([1 err])
grid on 

subplot(2,1,2)
plot(Sigma, HBIAS(1,:),'b*--', Sigma, HBIAS(2,:),'kd--', Sigma, HBIAS(3,:),'r^--',Sigma, HBIAS(4,:),'go--','linewidth',1.5)
%plot(Sigma, HBIAS(1,:),'b*--', Sigma, HBIAS(2,:),'kd--',Sigma, HBIAS(3,:),'ro--','linewidth',1.5)
set(gca,'Fontsize',14)
legend('K=9','K=11','K=13','K=15');
%legend('K=7','K=9','K=11','K=13','K=15');
xlabel('Bearing Noise Standard Deviation (degree)');
ylabel('Orienation Angle Error (degree)')
xlim([1 err])
grid on 

