clc;  %%%利用静态声源辅助实现单个未知节点定位BCPLE
clear all
format long
close all
%% 设定全局变量
global SIGMA
%% 设定基本的参数，比如蒙特卡洛的个数，DOA误差范围，声源个数等参数
M = 800;                         %Monte Caro times
%Beacon=[50,60,pi/10;60,30,pi/6;10,10,pi/6;50,40,pi/5;20,60,pi/3;80,90,pi/4]; 
%Beacon=rand(10,2)*100;
Unodes=[100,80,pi/3];            %未知节点的位置信息Unodes=[170,120,pi/3]; 
R=300;                            %感知半径
threshold = 200;
err=6;
%% 在不同声源数目下进行定位
z=0;
SIGMA=2;
 for BN = 10: 40 : 180
        num=0;
        nm=0;
        for i=1:M    
            kk=1;
            ei=0;
            pi1=0;
            SPbias=[];
 %% %%%%%%%%%%% 未知节点对声源和信标节点的DOA测量值%%%%%%%%%%%%%%%%%%%%
           S_Bcon=round(rand(BN,2)*100); 
            ku=0;
            for ib=1:length(S_Bcon(:,1))
                 BL=S_Bcon(ib,:);           %已定位的声源和信标
                 if sqrt((BL(1)-Unodes(1))^2+(BL(2)-Unodes(2))^2)<=R                       
                       ku=ku+1;
                       DOA(ku)= Current_Radian(BL,Unodes);   % 测得的带有噪声DOA值
                       SBStore(ku,:)=BL;    %声源估计位置存储
                 end
            end
            if ku>=3
  %% 用已知的声源对未知节点进行定位
                [P_Bias, H_Bias] = PLS(SBStore,DOA,Unodes(1:2),Unodes(3));%使用Psedo-Linear Least Squares.
                [UBC,OV,BP_Bias, BH_Bias] = BCPLS(SBStore,DOA,Unodes(1:2),Unodes(3));%使用Bias Compensated PseudoLinear Least Squares.
                [IVP_Bias, IVH_Bias] = WIV(SBStore,DOA,Unodes(1:2),Unodes(3),UBC);
                [MP, MH]=BMLF(SBStore,DOA,Unodes(1:2),Unodes(3),OV);
                if  P_Bias< threshold && MP
                    num= num + 1;
                    PLS_PBias(num) = P_Bias;  %存储结果，运行次数num
                    PLS_HBias(num) = H_Bias;
                    BCPL_PBias(num)=BP_Bias;
                    BCPL_HBias(num)=BH_Bias;
                    WIV_PBias(num)=IVP_Bias;
                    WIV_HBias(num)=IVH_Bias;
                    ML_PBias(num)=MP;
                    ML_HBias(num)=MH;
                end
            end
            DOA=[];
            SBStore=[];
        end
        display('------the programming is running now-----');
        z=z+1;
        PBIAS(z)= mean(PLS_PBias); %位置误差
        HBIAS(z)= mean(PLS_HBias);
        BC_PBIAS(z)= mean(BCPL_PBias);
        BC_HBIAS(z)= mean(BCPL_HBias);
        WIV_PBIAS(z)= mean(WIV_PBias);
        WIV_HBIAS(z)= mean(WIV_HBias);
        ML_PBIAS(z)= mean(ML_PBias);
        ML_HBIAS(z)= mean(ML_HBias);
        PLS_PBias=[];
        PLS_HBias=[];
        BCPL_PBias=[];
        BCPL_HBias=[];
        WIV_Pbias=[];
        WIV_Hbias=[];
        ML_HBias=[];
        ML_PBias=[];
 end

BN = 10: 40 : 180;
%% 数据存储
% xlswrite('BCPLE_PE',PBIAS);  %PLE位置误差保存
% xlswrite('BCPLE_HE',HBIAS);  %PLE角度误差保存
% xlswrite('BCPLE_PE',BC_PBIAS); %BCPLE位置误差保存
% xlswrite('BCPLE_HE',BC_HBIAS); %BCPLE角度误差保存
% xlswrite('WIV_PE',WIV_PBIAS); %BCPLE位置误差保存
% xlswrite('WIV_HE',WIV_HBIAS); %BCPLE角度误差保存

%% 图形显示2  节点方差
figure(1)
subplot(2,1,1)
plot(BN, PBIAS,'b*--',BN, BC_PBIAS,'go--',BN, WIV_PBIAS,'rs--',BN, ML_PBIAS,'mp--','linewidth',1.5)
set(gca,'Fontsize',14);
legend('PLE','BCPLE','WIV','ML');
xlabel('Bearing Noise Standard Deviation (degree)');
ylabel('Location Error (m)');
grid on 

subplot(2,1,2)
plot(BN, HBIAS,'b*--',BN, BC_HBIAS,'go--',BN, WIV_HBIAS,'rs--',BN, ML_HBIAS,'mp--','linewidth',1.5)
set(gca,'Fontsize',14)
legend('PLE','BCPLE','WIV','ML');
xlabel('Bearing Noise Standard Deviation (degree)');
ylabel('Orienation Error (degree)');
grid on 
