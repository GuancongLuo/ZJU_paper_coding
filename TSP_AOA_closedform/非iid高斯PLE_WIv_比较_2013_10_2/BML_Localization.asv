clc;  %%%利用静态声源辅助实现单个未知节点定位WLS
clear all
format long
close all

%% 设定全局变量
global SIGMA
global M
%% 设定基本的参数，比如蒙特卡洛的个数，DOA误差范围，声源个数等参数
M = 2000;                         %Monte Caro times
%Beacon=[10,30,pi/6;50,40,pi/5;20,40,pi/3;130,90,pi/4;50,140,pi/3;30 120 pi/3;90 10 pi]; %Beacon=[10,10,pi/6;170,40,pi/5;90,110,pi/3;15,180,pi/4];
%Beacon=round(rand(50,2)*100);
%Bl=length(Beacon(:,1));           %信标个数 Beacon=[10,20,pi/3;0,160,pi/6;170,190,pi/5;130,10,pi/4;60,100,pi/5];
%Unodes=[90,5,pi/3];          %未知节点的位置信息Unodes=[170,120,pi/3]; 
% node=round(rand(1,2)*100);
% Unodes=[node,pi/3];
R=200;                            %感知半径
threshold = 150;
err=3;
%% 在不同声源数目下进行定位
z=0;
 for SIGMA = 0.5: 0.5 : err
        num=0;
        nm=0;
%         Unode=round(rand(1,2)*100);
%         Hd=round(rand(1,1)*10)/10*pi/3;
%         Unodes=[Unode,Hd];
        for i=1:M    
            kk=1;
            ei=0;
            pi1=0;
            SPbias=[];
           Beacon=round(rand(100,2)*100);
            node=round(rand(1,2)*100);
            Hdr=round(rand(1,1)*100*pi/2)/100;
            Unodes=[node,Hdr];
 %% %%%%%%%%%%% 未知节点对声源和信标节点的DOA测量值%%%%%%%%%%%%%%%%%%%%
           S_Bcon=Beacon(:,1:2); 
            ku=0;
            for ib=1:length(S_Bcon(:,1))
                 BL=S_Bcon(ib,:);           %已定位的声源和信标
                 if sqrt((BL(1)-Unodes(1))^2+(BL(2)-Unodes(2))^2)<=R                       
                       ku=ku+1;
                       DOA(ku)= Current_Radian(BL,Unodes);   % 测得的带有噪声DOA值
                       SBStore(ku,:)=BL;    %声源估计位置存储
                 end
            end
            if ku>=3
  %% 用已知的声源对未知节点进行定位
                [PLE_PBias, PLE_HBias] = PLS(SBStore,DOA,Unodes(1:2),Unodes(3));
                [U,OV,P_Bias, H_Bias] = BCPLS(SBStore,DOA,Unodes(1:2),Unodes(3));%使用Psedo-Linear Least Squares.
                [MP, MH]=BMLF(SBStore,DOA,Unodes(1:2),Unodes(3),OV);
                [WP_Bias, WH_Bias] = WIV(SBStore,DOA,Unodes(1:2),Unodes(3),U);
                if  MP< threshold && WH_Bias < 30
                    num= num + 1;
                    PE_Pbias(num)=PLE_PBias;
                    PE_Hbias(num)=PLE_HBias;
                    BC_PBias(num) = P_Bias;  %存储结果，运行次数num
                    BC_HBias(num) = H_Bias;
                    ML_PBias(num) = MP;
                    ML_HBias(num) = MH; 
                    WIV_Pbias(num)= WP_Bias;
                    WIV_Hbias(num)= WH_Bias;
                end
            end
            DOA=[];
            SBStore=[];
        end
        display('------the programming is running now-----');
        z=z+1;
        PLE_
        PBIAS(z) = mean(BC_PBias); %位置误差
        HBIAS(z)= mean(BC_HBias);
        MPBIAS(z) =mean(ML_PBias); %位置误差
        MHBIAS(z)= mean(ML_HBias);
        WIV_PB(z)=mean(WIV_Pbias);
        WIV_HB(z)=mean(WIV_Hbias);
        BC_PBias=[];
        BC_HBias=[];
        ML_PBias=[];
        ML_HBias=[];
        WIV_Pbias=[];
        WIV_Hbias=[];
 end

Sigma=0.5: 0.5 : err;
%% 数据存储
xlswrite('PLE_PE',PBIAS);%位置误差保存
xlswrite('PLE_HE',HBIAS);%角度误差保存
xlswrite('MPBIAS',MPBIAS);%ML位置误差保存
xlswrite('MHBIAS',MHBIAS);%ML角度误差保存
xlswrite('MWIV_PB',WIV_PB);%ML位置误差保存
xlswrite('WIV_HB',WIV_HB);%ML角度误差保存


%% 图形显示2  节点方差
figure(1)
subplot(2,1,1)
plot(Sigma,PBIAS,'b*--', Sigma, MPBIAS,'rs--', Sigma, WIV_PB,'g+--','linewidth',1.5)
set(gca,'Fontsize',14);
legend('BCPLE','ML','WIV');
xlabel('Bearing Noise Standard Deviation (degree)');
ylabel('Location Error (m)');
xlim([1 err]);
grid on 

subplot(2,1,2)
plot(Sigma,HBIAS,'b*--', Sigma, MHBIAS,'rs--', Sigma, WIV_HB,'g+--','linewidth',1.5)
set(gca,'Fontsize',14)
legend('BCPLE','ML','WIV');
xlabel('Bearing Noise Standard Deviation (degree)');
ylabel('Orienation Error (degree)');
xlim([1 err])
grid on 
